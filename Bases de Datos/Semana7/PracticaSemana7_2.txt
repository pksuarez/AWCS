CREATE TABLE STUDENTS
(carne NUMBER (6) NOT NULL,
FIRST_NAME VARCHAR(30) NOT NULL,
LAST_NAME VARCHAR(30) NOT NULL,
NOTA NUMBER(3) NOT NULL,
PRIMARY KEY (carne));

drop table students;

INSERT INTO STUDENTS
VALUES (20,'JUAN','PEREZ',90);

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE PrintStudents(p_nota IN students.nota%TYPE)
AS
CURSOR c_Students IS
SELECT first_name, last_name
FROM students;
BEGIN
FOR v_StudentRec IN c_Students LOOP
DBMS_OUTPUT.PUT_LINE(v_StudentRec.first_name || ' ' ||
v_StudentRec.last_name);
END LOOP;
END;

BEGIN
 PrintStudents(90);
END;

delete FROM STUDENTS;

CREATE OR REPLACE PROCEDURE agregarAlumno
   (p_carne STUDENTS.carne%type,
    p_nombre STUDENTS.FIRST_NAME%type,
    p_apellido STUDENTS.LAST_NAME%TYPE,
    p_nota STUDENTS.NOTA%TYPE)
IS
   v_id STUDENTS.carne%type;
   e1 EXCEPTION;

BEGIN
SELECT count(*) into v_id FROM STUDENTS;
 if v_id=0 then
     RAISE e1;
 end if;
 INSERT INTO STUDENTS (carne, first_name,last_name,nota )
 VALUES (p_carne, p_nombre,p_apellido,p_nota );
EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      raise_application_error (-20001,'usted esta tratando de ingresar un carne que ya existe.');

   WHEN e1 THEN
      raise_application_error (-20001,'No existen Alumnos en la Tabla.');

   WHEN OTHERS THEN
      raise_application_error (-20002,'Ocurrio un error al insertar un Alumno.');

END;
SELECT count(*)
FROM STUDENTS;

BEGIN
 agregarAlumno(10,'jose','perez',100);
END;

CREATE TABLE LOG_TABLE
(
ErrorCode NUMBER,        
ErrorMsg VARCHAR2(40),    
Usuario VARCHAR2(20),
Information VARCHAR2(100));

drop table LOG_TABLE;
SELECT * FROM STUDENTS;


CREATE OR REPLACE PROCEDURE agregarAlumno
   (p_carne STUDENTS.carne%type,
    p_nombre STUDENTS.FIRST_NAME%type,
    p_apellido STUDENTS.LAST_NAME%TYPE,
    p_nota STUDENTS.NOTA%TYPE)
IS

v_ErrorCode NUMBER;           -- Code for the error
v_ErrorMsg VARCHAR2(40);      -- Message text for the error
v_CurrentUser VARCHAR2(20);    -- Current database user
v_Information VARCHAR2(100);  -- Information about the error

BEGIN
    INSERT INTO STUDENTS (carne, first_name,last_name,nota )
    VALUES (p_carne, p_nombre,p_apellido,p_nota );
EXCEPTION
WHEN OTHERS THEN
  v_ErrorCode := SQLCODE;
  v_ErrorMsg := SQLERRM;
  v_CurrentUser := USER;
  v_Information := 'Error encountered on ' ||
  TO_CHAR(SYSDATE) || ' by database user ' || v_CurrentUser;
INSERT INTO log_table (ErrorCode, ErrorMsg,usuario,Information)
VALUES (v_ErrorCode, v_ErrorMsg,v_CurrentUser,v_Information);
END;

BEGIN
 agregarAlumno(50,'jose','perez',1000);
END;

select * from log_table;

REM This is an example of a database trigger.

CREATE OR REPLACE TRIGGER SoloPositivo
BEFORE INSERT OR UPDATE OF nota
ON STUDENTS
FOR EACH ROW
BEGIN
  IF :new.nota < 0 THEN
    RAISE_APPLICATION_ERROR(-20100, 'Por favor digite una nota positiva');
  END IF;
END;


update STUDENTS
set nota=50

select * from students